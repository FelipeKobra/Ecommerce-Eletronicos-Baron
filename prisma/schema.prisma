datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String
  name      String
  quantity  Int
  color     String
  price     Float
  image     String
  Order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

model Address {
  id      String  @id @default(cuid())
  cidade  String
  estado  String
  pais    String
  line1   String
  line2   String?
  CEP     String
  orderId String? @unique
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  imagePath      String?
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           Role            @default(USER)
  accounts       Account[]
  Orders         Order[]
  ProductReview  ProductReview[]
}

enum Role {
  USER
  ADMIN
}

model Order {
  id                String          @id @default(cuid())
  userId            String
  amount            Float
  currency          String
  status            PaymentStatus   @default(Pendente)
  deliveryStatus    DeliveryStatus? @default(Pendente)
  createDate        DateTime        @default(now())
  payment_intent_id String          @unique
  products          OrderItem[]
  address           Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  Pendente
  Realizado
}

enum DeliveryStatus {
  Pendente
  Caminho
  Entregue
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String
  brand           String
  category        String
  selling         Boolean           @default(true)
  createdDate     DateTime          @default(now())
  ProductReview   ProductReview[]
  ProductVariable ProductVariable[]
}

model ProductReview {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int
  comment     String
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariable {
  id        String  @id @default(cuid())
  productId String
  color     String
  colorCode String
  stock     Int
  price     Float
  image     String
  imagePath String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
